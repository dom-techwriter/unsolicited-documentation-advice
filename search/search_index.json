{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Unsolicited Documentation Advice So this is going to be a bit of a brain dump of all the things I've learned as a technical writer. It might have something to do with technology, or who knows what! Let's just see what we get ;) Tip So, let's get started with something, what do you say?","title":"Unsolicited Documentation Advice"},{"location":"#unsolicited-documentation-advice","text":"So this is going to be a bit of a brain dump of all the things I've learned as a technical writer. It might have something to do with technology, or who knows what! Let's just see what we get ;) Tip So, let's get started with something, what do you say?","title":"Unsolicited Documentation Advice"},{"location":"AJV/ajv/","text":"AJV We can use AJV to test our schemas! And it's pretty cool. The basics is that you need to first create a variable that contains your schema. Oh, and just so you know, your schema can also include some additional pattern testing if you need! Make sure that you remove the $schema element, as otherwise it won't work at all :(. let schemaToTest = { { \"title\" : \"tax retention\" , \"description\" : \"A standard schema to represent a tax retention\" , \"type\" : \"object\" , \"additionalProperties\" : false , \"required\" : [ \"collected_at\" , \"invoice_identification\" , \"version\" , \"code\" , \"issued_at\" , \"certified_at\" , \"cancelled_at\" , \"sender_id\" , \"sender_name\" , \"receiver_nationality\" , \"receiver_id\" , \"receiver_name\" , \"total_invoice_amount\" , \"total_taxable_amount\" , \"total_exempt_amount\" , \"total_retained_amount\" , \"retention_breakdown\" , \"xml\" ], \"properties\" : { \"collected_at\" : { \"type\" : [ \"string\" , \"null\" ], \"format\" : \"date-time\" }, \"invoice_identification\" : { \"type\" : [ \"string\" , \"null\" ] }, \"version\" : { \"type\" : [ \"string\" , \"null\" ] }, \"code\" : { \"type\" : [ \"integer\" , \"null\" ] }, \"issued_at\" : { \"type\" : [ \"string\" , \"null\" ], \"format\" : \"date-time\" }, \"certified_at\" : { \"type\" : [ \"string\" , \"null\" ], \"format\" : \"date-time\" }, \"cancelled_at\" : { \"type\" : [ \"string\" , \"null\" ], \"format\" : \"date-time\" }, \"sender_id\" : { \"type\" : [ \"string\" , \"null\" ] }, \"sender_name\" : { \"type\" : [ \"string\" , \"null\" ] }, \"receiver_nationality\" : { \"type\" : [ \"string\" , \"null\" ] }, \"receiver_id\" : { \"type\" : [ \"string\" , \"null\" ] }, \"receiver_name\" : { \"type\" : [ \"string\" , \"null\" ] }, \"total_invoice_amount\" : { \"type\" : [ \"number\" , \"null\" ] }, \"total_taxable_amount\" : { \"type\" : [ \"number\" , \"null\" ] }, \"total_exempt_amount\" : { \"type\" : [ \"number\" , \"null\" ] }, \"total_retained_amount\" : { \"type\" : [ \"number\" , \"null\" ] }, \"retention_breakdown\" : { \"type\" : [ \"array\" , \"null\" ], \"required\" : [ \"base_amount\" , \"tax_type\" , \"retained_amount\" , \"payment_status\" ], \"items\" : { \"type\" : \"object\" , \"properties\" : { \"base_amount\" : { \"type\" : [ \"number\" , \"null\" ] }, \"tax_type\" : { \"type\" : [ \"string\" , \"null\" ] }, \"retained_amount\" : { \"type\" : [ \"number\" , \"null\" ] }, \"payment_status\" : { \"type\" : [ \"string\" , \"null\" ] } } } }, \"xml\" : { \"type\" : [ \"string\" , \"null\" ] } } }","title":"AJV"},{"location":"AJV/ajv/#ajv","text":"We can use AJV to test our schemas! And it's pretty cool. The basics is that you need to first create a variable that contains your schema. Oh, and just so you know, your schema can also include some additional pattern testing if you need! Make sure that you remove the $schema element, as otherwise it won't work at all :(. let schemaToTest = { { \"title\" : \"tax retention\" , \"description\" : \"A standard schema to represent a tax retention\" , \"type\" : \"object\" , \"additionalProperties\" : false , \"required\" : [ \"collected_at\" , \"invoice_identification\" , \"version\" , \"code\" , \"issued_at\" , \"certified_at\" , \"cancelled_at\" , \"sender_id\" , \"sender_name\" , \"receiver_nationality\" , \"receiver_id\" , \"receiver_name\" , \"total_invoice_amount\" , \"total_taxable_amount\" , \"total_exempt_amount\" , \"total_retained_amount\" , \"retention_breakdown\" , \"xml\" ], \"properties\" : { \"collected_at\" : { \"type\" : [ \"string\" , \"null\" ], \"format\" : \"date-time\" }, \"invoice_identification\" : { \"type\" : [ \"string\" , \"null\" ] }, \"version\" : { \"type\" : [ \"string\" , \"null\" ] }, \"code\" : { \"type\" : [ \"integer\" , \"null\" ] }, \"issued_at\" : { \"type\" : [ \"string\" , \"null\" ], \"format\" : \"date-time\" }, \"certified_at\" : { \"type\" : [ \"string\" , \"null\" ], \"format\" : \"date-time\" }, \"cancelled_at\" : { \"type\" : [ \"string\" , \"null\" ], \"format\" : \"date-time\" }, \"sender_id\" : { \"type\" : [ \"string\" , \"null\" ] }, \"sender_name\" : { \"type\" : [ \"string\" , \"null\" ] }, \"receiver_nationality\" : { \"type\" : [ \"string\" , \"null\" ] }, \"receiver_id\" : { \"type\" : [ \"string\" , \"null\" ] }, \"receiver_name\" : { \"type\" : [ \"string\" , \"null\" ] }, \"total_invoice_amount\" : { \"type\" : [ \"number\" , \"null\" ] }, \"total_taxable_amount\" : { \"type\" : [ \"number\" , \"null\" ] }, \"total_exempt_amount\" : { \"type\" : [ \"number\" , \"null\" ] }, \"total_retained_amount\" : { \"type\" : [ \"number\" , \"null\" ] }, \"retention_breakdown\" : { \"type\" : [ \"array\" , \"null\" ], \"required\" : [ \"base_amount\" , \"tax_type\" , \"retained_amount\" , \"payment_status\" ], \"items\" : { \"type\" : \"object\" , \"properties\" : { \"base_amount\" : { \"type\" : [ \"number\" , \"null\" ] }, \"tax_type\" : { \"type\" : [ \"string\" , \"null\" ] }, \"retained_amount\" : { \"type\" : [ \"number\" , \"null\" ] }, \"payment_status\" : { \"type\" : [ \"string\" , \"null\" ] } } } }, \"xml\" : { \"type\" : [ \"string\" , \"null\" ] } } }","title":"AJV"},{"location":"Chai%20testing%20library/Chai%20101/","text":"Writing tests Post-request tests const response = pm . response . json (); Testing that something isn't null to.not.be.null pm . test ( \"Message you want to display if there's an error\" , function () { pm . expect ( response . parameter_to_test , \"Message to display\" ). to . not . be . null ; });","title":"Writing tests"},{"location":"Chai%20testing%20library/Chai%20101/#writing-tests","text":"","title":"Writing tests"},{"location":"Chai%20testing%20library/Chai%20101/#post-request-tests","text":"const response = pm . response . json ();","title":"Post-request tests"},{"location":"Chai%20testing%20library/Chai%20101/#testing-that-something-isnt-null","text":"to.not.be.null pm . test ( \"Message you want to display if there's an error\" , function () { pm . expect ( response . parameter_to_test , \"Message to display\" ). to . not . be . null ; });","title":"Testing that something isn't null"},{"location":"Postman/Postman%20visualizer/","text":"Visualizer boilerplate < h1 > Basic details about the tax payer </ h1 > < ul > < li > Name: {{belvo.tax_payer_information.name}} {{belvo.tax_payer_information.first_last_name}} {{belvo.tax_payer_information.second_last_name}} </ li > < li > RFC: {{belvo.tax_payer_information.rfc}} </ li > </ ul > < h2 > Economic activities </ h2 > < table class = \"tftable\" border = \"1\" > < tr > < th > Economic Activity </ th > < th > Percentage </ th > </ tr > {{#each response.economic_activity}} < tr id = row_{{@key}} onClick = \"handleClick(this.id)\" > < td id = {{@key}} > {{economic_activity}} </ td > < td > {{percentage}} </ td > </ tr > {{/each}} </ table >","title":"Visualizer boilerplate"},{"location":"Postman/Postman%20visualizer/#visualizer-boilerplate","text":"< h1 > Basic details about the tax payer </ h1 > < ul > < li > Name: {{belvo.tax_payer_information.name}} {{belvo.tax_payer_information.first_last_name}} {{belvo.tax_payer_information.second_last_name}} </ li > < li > RFC: {{belvo.tax_payer_information.rfc}} </ li > </ ul > < h2 > Economic activities </ h2 > < table class = \"tftable\" border = \"1\" > < tr > < th > Economic Activity </ th > < th > Percentage </ th > </ tr > {{#each response.economic_activity}} < tr id = row_{{@key}} onClick = \"handleClick(this.id)\" > < td id = {{@key}} > {{economic_activity}} </ td > < td > {{percentage}} </ td > </ tr > {{/each}} </ table >","title":"Visualizer boilerplate"}]}